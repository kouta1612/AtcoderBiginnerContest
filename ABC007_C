import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {

	static int R, C, sx, sy, gx, gy;
	static char[][] c;
	static int[][] gragh;
	static int[] dx = {1, -1, 0, 0};
	static int[] dy = {0, 0, 1, -1};
	static final int INF = Integer.MAX_VALUE;

	static class Pair {
		int x, y;
		Pair(int x, int y) {
			this.x = x;
			this.y = y;
		}

	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		R = sc.nextInt();
		C = sc.nextInt();
		sx = sc.nextInt() - 1;
		sy = sc.nextInt() - 1;
		gx = sc.nextInt() - 1;
		gy = sc.nextInt() - 1;
		c = new char[R][C + 1];
		for(int i = 0 ; i < R ; i++) {
			String s = sc.next();
			for(int j = 0 ; j < C ; j++) {
				c[i][j] = s.charAt(j);
			}
		}
		int ans = bfs();
		System.out.println(ans);
	}

	public static int bfs() {
		Queue<Pair> que = new LinkedList<>();
		gragh = new int[R][C];
		for(int i = 0 ; i < R ; i++) {
			for(int j = 0 ; j < C ; j++) {
				gragh[i][j] = INF;
			}
		}
		que.add(new Pair(sx, sy));
		gragh[sx][sy] = 0;
		while(que.size() != 0) {
			Pair p = que.poll();
			if(p.x == gx && p.y == gy) break;
			for(int i = 0 ; i < 4 ; i++) {
				int nx = p.x + dx[i];
				int ny = p.y + dy[i];
				if(0 <= nx && nx < R && 0 <= ny && ny < C && c[nx][ny] != '#' && gragh[nx][ny] == INF) {
					que.add(new Pair(nx, ny));
					gragh[nx][ny] = gragh[p.x][p.y] + 1;
				}
			}
		}
		return gragh[gx][gy];
	}

}

